bid,title,contents,writer,regDate
1,"필자가 생각하는 플라스크란?",NULL,blue,"2024-07-31 11:57:00"
2,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-07-31 11:57:00"
7,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-07-31 17:34:50"
8,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-07-31 17:57:07"
9,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 09:50:57"
10,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:46:14"
11,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:50:36"
12,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:50:36"
13,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:50:36"
14,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:50:36"
15,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:50:36"
16,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:50:36"
18,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:50:57"
19,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:50:57"
20,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:50:57"
21,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:50:57"
22,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:50:57"
23,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:50:57"
24,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:50:57"
25,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:50:57"
26,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:50:57"
27,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:50:57"
28,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:50:57"
29,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:50:57"
33,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:01"
34,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:01"
35,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:01"
36,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:01"
37,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:01"
38,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:01"
39,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:01"
40,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:01"
41,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:01"
42,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:01"
43,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:01"
44,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:01"
45,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:01"
46,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:01"
47,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:01"
48,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:01"
49,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:01"
50,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:01"
51,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:01"
52,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:01"
53,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:01"
54,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:01"
55,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:01"
56,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:01"
64,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:07"
65,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:07"
66,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:07"
67,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:07"
68,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:07"
69,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:07"
70,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:07"
71,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:07"
72,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:07"
73,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:07"
74,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:07"
75,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:07"
76,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:07"
77,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:07"
78,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:07"
79,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:07"
80,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:07"
81,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:07"
82,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:07"
83,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:07"
84,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:07"
85,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:07"
86,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:07"
87,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:07"
88,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:07"
89,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:07"
90,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:07"
91,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:07"
92,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:07"
93,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:07"
94,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:07"
95,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:07"
96,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:07"
97,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:07"
98,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:07"
99,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:07"
100,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:07"
101,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:07"
102,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:07"
103,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:07"
104,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:07"
105,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:07"
106,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:07"
107,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:07"
108,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:07"
109,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:07"
110,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:07"
111,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:07"
127,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:11"
128,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:11"
129,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:11"
130,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:11"
131,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:11"
132,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:11"
133,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:11"
134,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:11"
135,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:11"
136,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:11"
137,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:11"
138,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:11"
139,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:11"
140,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:11"
141,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:11"
142,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:11"
143,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:11"
144,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:11"
145,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:11"
146,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:11"
147,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:11"
148,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:11"
149,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:11"
150,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:11"
151,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:11"
152,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:11"
153,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:11"
154,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:11"
155,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:11"
156,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:11"
157,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:11"
158,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:11"
159,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:11"
160,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:11"
161,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:11"
162,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:11"
163,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:11"
164,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:11"
165,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:11"
166,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:11"
167,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:11"
168,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:11"
169,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:11"
170,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:11"
171,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:11"
172,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:11"
173,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:11"
174,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:11"
175,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:11"
176,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:11"
177,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:11"
178,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:11"
179,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:11"
180,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:11"
181,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:11"
182,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:11"
183,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:11"
184,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:11"
185,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:11"
186,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:11"
187,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:11"
188,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:11"
189,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:11"
190,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:11"
191,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:11"
192,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:11"
193,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:11"
194,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:11"
195,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:11"
196,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:11"
197,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:11"
198,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:11"
199,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:11"
200,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:11"
201,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:11"
202,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:11"
203,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:11"
204,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:11"
205,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:11"
206,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:11"
207,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:11"
208,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:11"
209,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:11"
210,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:11"
211,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:11"
212,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:11"
213,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:11"
214,"Flask를 시작하기 원합니까?","먼저 우리는 Flask class를 임포트했다. 이 클래스의 인스턴스가 우리의 WSGI어플리케이션이 될것이다. 첫번째 인자는 이 어플리케이션의 이름이다. 여러분이 단일 모듈을 사용한다면(위의 예제처럼),여러분은 __name__`을 사용해야한다. 왜냐하면, 어플리케이션으로 시작되는지, 혹은 모듈로 임포트되는지에 따라 이름이 달라지기 때문이다.(`‘__main__’`` 대 실제로 임포트한 이름) 더 자세한 정보는 Flask 문서를 참고해라.

다음은 Flask class의 인스턴스를 생성한다. 인자로 모듈이나 패키지의 이름을 넣는다. 이것은 플라스크에서 팀플릿이나 정적파일을 찾을때 필요하다.
route() 데코레이터를 사용해서 Flask에게 어떤 URL이 우리가 작성한 함수를 실행시키는지 알려준다.
작성된 함수의 이름은 그 함수에 대한 URL을 생성하는데 사용되고(url_for 함수 참고), 그 함수는 사용자 브라우저에 보여줄 메시지를 리턴한다.

최종적으로 run() 함수를 사용해서 우리가 개발한 어플리케이션을 로컬서버로 실행한다. 소스파일을 모듈이 아닌 python 인터프리터를 이용해서 직접 실행한다면 if __name__ == '__main__': 이 문장은 우리가 실행한 서버가 현재 동작되는 유일한 서버라는 것을 보장한다.",red,"2024-08-01 10:51:11"
215,"Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-01 10:51:11"
216,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:11"
217,"필자가 생각하는 플라스크란?",NULL,blue,"2024-08-01 10:51:11"
218,"플라스크는 마이크로 웹 프레임워크다",NULL,red,"2024-08-01 10:51:11"
219,"기본 애플리케이션","이 내용을 hello.py (아니면 비슷한 다른 이름으로) 저장하고 파이썬 인터프리터로 실행한다. 여러분이 작성한 어플리케이션을 `flask.py`로 호출하지 않도록 주의해라. 왜냐하면 Flask 자체와 충돌이 나기 때문이다.",red,"2024-08-01 10:51:11"
221,"수정 Flask는 어떻게 동작하는가 1편 (with WSGI)","안녕하세요. Teus입니다.

그동안 계속해서 네트워크 관련 Low Level을 알아 보았습니다.
이번에는 Python에서 많이 사용되는 Web FrameWork인 Flask에 대해서 알아보겠습니다.
대신, 어렵지않게 튜토리얼과 함께 말이죠!",blue,"2024-08-05 13:12:09"
222,"수정 입력테스트 입니다.","수정한 내용입니다.",red,"2024-08-01 10:51:11"
225,수정제목입니다.,수정내용입니다.,blue,"2024-08-05 11:12:45"
226,"(수정) 한 번 배워서 어디서나 사용하기","수정한 내용입니다.
기술 스택의 나머지 부분에는 관여하지 않기 때문에, 기존 코드를 다시 작성하지 않고도 React의 새로운 기능을 이용해 개발할 수 있습니다.

React는 Node 서버에서 렌더링을 할 수도 있고, React Native를 이용하면 모바일 앱도 만들 수 있습니다.",blue,"2024-08-05 13:14:13"
